import * as THREE from 'three'
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
import Stats from 'three/examples/jsm/libs/stats.module.js'
import {GUI} from 'dat.gui'
import {OutlineEffect} from 'three/examples/jsm/effects/OutlineEffect'

import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'

const scene = new THREE.Scene()
scene.background = new THREE.Color(0xFFFFFF)

const ambientLight = new THREE.AmbientLight( 0xFFFFFF, 0.16 );
scene.add( ambientLight );

const directionalLight = new THREE.DirectionalLight(0xE4E9ED, 1)
directionalLight.castShadow = true
directionalLight.shadow.mapSize.width = 4096
directionalLight.shadow.mapSize.height = 4096
directionalLight.shadow.camera.near = 0.1
directionalLight.shadow.camera.far = 15
scene.add(directionalLight)
directionalLight.position.set(-4,5,3)

// const helper = new THREE.CameraHelper(directionalLight.shadow.camera)
// scene.add(helper)

const camera = new THREE.PerspectiveCamera(
    45,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
)
camera.position.z = 6.5

const renderer = new THREE.WebGLRenderer({antialias: true})
renderer.shadowMap.enabled = true
renderer.shadowMap.type = THREE.PCFSoftShadowMap
renderer.setSize(window.innerWidth, window.innerHeight)
document.body.appendChild(renderer.domElement)

new OrbitControls(camera, renderer.domElement)

const outline = new OutlineEffect( renderer, {
    defaultThickness: .01,
    defaultColor: [ .55, 0, 0 ],
    defaultAlpha: .8,
    defaultKeepAlive: true // keeps outline material in cache even if material is removed from scene
});

const fiveTone = new THREE.TextureLoader().load('img/gradientMaps/fiveTone.jpg')
fiveTone.minFilter = THREE.NearestFilter
fiveTone.magFilter = THREE.NearestFilter

const geometry = new THREE.BoxGeometry()
const material: THREE.MeshToonMaterial = new THREE.MeshToonMaterial({
    color: 0xFF0000,
    gradientMap: fiveTone,
})

const cube = new THREE.Mesh(geometry, material)
scene.add(cube)
cube.position.x=-3
cube.castShadow = true

const sphereGeometry = new THREE.SphereGeometry(.7)
const sphere = new THREE.Mesh(sphereGeometry, material)
sphere.position.x = 3
scene.add(sphere)
sphere.castShadow = true

const planeGeometry = new THREE.PlaneGeometry(100,100)
const planeMaterial = new THREE.ShadowMaterial({
  color: 0xD7E0E5,
})

const plane = new THREE.Mesh(planeGeometry, planeMaterial)
scene.add(plane)
plane.rotation.set(-Math.PI/2,0,0)
plane.position.y = -1.5
plane.receiveShadow = true

const loader = new GLTFLoader()
loader.load('models/monkey.glb', function (gltf) {
        // gltf.scene.traverse(function (child) {
        //     if ((child as THREE.Mesh).isMesh) {
        //         const m = (child as THREE.Mesh)
        //         m.receiveShadow = true
        //         m.castShadow = true
        //     }
        //     if (((child as THREE.Light)).isLight) {
        //         const l = (child as THREE.Light)
        //         l.castShadow = true
        //         l.shadow.bias = -.003
        //         l.shadow.mapSize.width = 2048
        //         l.shadow.mapSize.height = 2048
        //     }
        // })
        gltf.scene.traverse(function(child){
          if ((child as THREE.Mesh).isMesh) {
              const m = (child as THREE.Mesh)
              m.material = material
              m.castShadow = true
          }
        })
        scene.add(gltf.scene)
    },
    (xhr) => {
        console.log((xhr.loaded / xhr.total) * 100 + '% loaded')
    },
    (error) => {
        console.log(error)
    }
)

window.addEventListener('resize', onWindowResize, false)

function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight
    camera.updateProjectionMatrix()
    renderer.setSize(window.innerWidth, window.innerHeight)
}

const stats = Stats()
document.body.appendChild(stats.dom)

const gui = new GUI()
const cubeFolder = gui.addFolder('cube rotation')
cubeFolder.add(cube.rotation, "x", 0, Math.PI * 2)
cubeFolder.add(cube.rotation, "y", 0, Math.PI * 2)
cubeFolder.add(cube.rotation, "z", 0, Math.PI * 2)
cubeFolder.open()

const directionalLightFolder = gui.addFolder('DirectionalLight')
directionalLightFolder
    .add(directionalLight.shadow.camera, 'left', -10, -1, 0.1)
    .onChange(() => directionalLight.shadow.camera.updateProjectionMatrix())
directionalLightFolder
    .add(directionalLight.shadow.camera, 'right', 1, 10, 0.1)
    .onChange(() => directionalLight.shadow.camera.updateProjectionMatrix())
directionalLightFolder
    .add(directionalLight.shadow.camera, 'top', 1, 10, 0.1)
    .onChange(() => directionalLight.shadow.camera.updateProjectionMatrix())
directionalLightFolder
    .add(directionalLight.shadow.camera, 'bottom', -10, -1, 0.1)
    .onChange(() => directionalLight.shadow.camera.updateProjectionMatrix())
directionalLightFolder
    .add(directionalLight.shadow.camera, 'near', 0.1, 100)
    .onChange(() => directionalLight.shadow.camera.updateProjectionMatrix())
directionalLightFolder
    .add(directionalLight.shadow.camera, 'far', 0.1, 100)
    .onChange(() => directionalLight.shadow.camera.updateProjectionMatrix())
directionalLightFolder.add(directionalLight.position, 'x', -50, 50, 0.01)
directionalLightFolder.add(directionalLight.position, 'y', -50, 50, 0.01)
directionalLightFolder.add(directionalLight.position, 'z', -50, 50, 0.01)
directionalLightFolder.add(directionalLight, "intensity", 0, 1, .01)
directionalLightFolder.open()

const ambientLightFolder = gui.addFolder("AmibentLight")
ambientLightFolder.add(ambientLight, 'intensity', 0, 1, 0.01)

const cameraFolder = gui.addFolder('camera')
cameraFolder.add(camera.position, 'z', 0, 20)
cameraFolder.open()

function animate() {

    stats.update()

    // helper.update()

    cube.rotation.x += 0.01
    cube.rotation.y += 0.01

    outline.render(scene, camera)

}

renderer.setAnimationLoop(animate)